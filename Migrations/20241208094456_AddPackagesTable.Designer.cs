// <auto-generated />
using CarShopApp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CarShop.Migrations
{
    [DbContext(typeof(CarShopContext))]
    [Migration("20241208094456_AddPackagesTable")]
    partial class AddPackagesTable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.32")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CarShopApp.Car", b =>
                {
                    b.Property<int>("CarID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarDesc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarEngine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CarPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CarType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CarID");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarShopApp.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Package");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Features = @"Мультимедийная система: стандартная аудиосистема с CD/MP3 плеером, поддержка радио.
Салон: тканевый салон, механические сиденья.
Колеса: стальные диски с базовыми шинами.
Безопасность: стандартные подушки безопасности, система контроля давления в шинах.
Удобства: отсутствие системы помощи при парковке, базовый кондиционер.",
                            Name = "Стандартная"
                        },
                        new
                        {
                            Id = 2,
                            Features = @"Мультимедийная система: улучшенная аудиосистема с Bluetooth, USB и AUX, поддержка Android Auto и Apple CarPlay.
Салон: тканевый или частично кожаный салон, сиденья с электрической регулировкой.
Колеса: литые диски, улучшенные шины для лучшего сцепления.
Безопасность: дополнительные подушки безопасности, система помощи при парковке с датчиками, контроль мертвых зон.
Удобства: климат-контроль, обогрев сидений, мультимедийный экран с сенсорным управлением, камера заднего вида.",
                            Name = "Повышенной комфортности"
                        },
                        new
                        {
                            Id = 3,
                            Features = @"Мультимедийная система: премиум аудиосистема с поддержкой всех современных технологий, сенсорный экран, встроенная навигация.
Салон: полностью кожаный салон, сиденья с подогревом и вентиляцией, массажные сиденья.
Колеса: литые диски с уникальным дизайном, спортивные шины.
Безопасность: полный набор подушек безопасности, системы автоматического торможения, система помощи при парковке с камерой 360°, контроль сплошной полосы.
Удобства: панорамная крыша, система автоматической парковки, адаптивный круиз-контроль, система предупреждения о возможном столкновении.",
                            Name = "Премиум"
                        });
                });

            modelBuilder.Entity("CarShopApp.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Клиент"
                        });
                });

            modelBuilder.Entity("CarShopApp.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@carshop.com",
                            Login = "Admin",
                            Password = "$2a$11$qhhFcOFr1xooLq0/7nbTfewJvrXYiCNn6P4P7dLgfyn1FX6wgm7Ui",
                            Phone = "+1234567890",
                            RoleId = 1,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("CarShopApp.User", b =>
                {
                    b.HasOne("CarShopApp.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
